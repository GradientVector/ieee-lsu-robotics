#How to set up the Netbeans IDE for our project.

= Introduction =

Netbeans is a very robust and full-featured integrated development environment that can be used with multiple programming languages, such as C, C++, and Java (http://www.netbeans.org/). This page will explain how to get Netbeans installed on Ubuntu, and how to the built-in version control features to checkout the Google Code project to your computer.

*Note*
I may write a similar wiki page in the future for using the Eclipse IDE, but for now Netbeans will be our IDE of choice.


= Installing and Configuring Netbeans =

The Linux computers in the lab should already have Netbeans installed and configured, but if you are working from home then you will need to follow these steps.

 # The first thing you need to do is install Netbeans using the synaptic package manager (or using apt-get at the command line if you're linux-savvy). Go to *System -> Administration -> Synaptic Package Manager*. Ubuntu will request that you type in your password so that you can make administrative changes. <img src="https://lh3.googleusercontent.com/_OYJ8fj3PJrU/TVMSG5bocdI/AAAAAAAAABw/BW5Jn3z7o0E/s640/menu.png"/>
 # Using the quick search in the upper right corner of the window, search for Netbeans. Select the package that just says Netbeans, and check *Mark for Installation* from the drop-down menu. <img src="https://lh4.googleusercontent.com/_OYJ8fj3PJrU/TVMSlghqLBI/AAAAAAAAAC0/EUCUBnagYnA/s640/Screenshot-Synaptic%20Package%20Manager%20.png"/>
 # Search for OpenCV in the quick search. There will be several packages you need to install here. *Check libhighgui-dev* first, as this package will probably automatically check a few of the other packages. You should at least have libcv-dev, libcvaux-dev, and libhighgui-dev checked. You can also check the documentation package if you wish. <img src="https://lh6.googleusercontent.com/_OYJ8fj3PJrU/TVMSlj_UgcI/AAAAAAAAAC4/vG5YT2yZ6fs/s640/Screenshot-Synaptic%20Package%20Manager%20-1.png"/>
 # Once you have checked all of the packages you want to install, click the apply button to actually download and install everything.
 # Open the Netbeans IDE. You can find it under *Applications -> Programming -> Netbeans IDE 6.9*. <img src="https://lh6.googleusercontent.com/_OYJ8fj3PJrU/TVMSHqR4dqI/AAAAAAAAAB0/ygoEg-kPVYc/s640/Menu-Open-Netbeans.png"/>
 # We need to install the C/C++ plugin to allow Netbeans to work with C++ programs. Go to the plugin menu at **. <img src="https://lh4.googleusercontent.com/_OYJ8fj3PJrU/TVMSh-Q1MbI/AAAAAAAAACs/GEz1pfy_zcE/s640/Screenshot-Robotics%20-%20NetBeans%20IDE%206.9-2.png"/>
 # Check the C/C++ plugin under the _Downloadable Plugins_ tab and click install. Once it is finished you should see the plugin under the _Installed_ tab. <img src="https://lh4.googleusercontent.com/_OYJ8fj3PJrU/TVMSV_fJcaI/AAAAAAAAACU/hF6VizAe-rU/s640/Screenshot-Plugins.png"/>
 # Go to the options menu under *Tools -> Options*. <img src="https://lh5.googleusercontent.com/_OYJ8fj3PJrU/TVMxJ1quu7I/AAAAAAAAADM/iTfMPyyfqFg/s640/Screenshot-Robotics%20-%20NetBeans%20IDE%206.9-3.png"/>
 # Make sure that your options under the C/C++ tab are the same as the window displayed below. Otherwise Netbeans will not be able to compile C++ files. *COMMON PROBLEM:* You may have to install _g++_ on your computer, as it does not always come pre-installed on Ubuntu. Use the synaptic package manager if you need to download it. <img src="https://lh3.googleusercontent.com/_OYJ8fj3PJrU/TVMxKO-HGeI/AAAAAAAAADQ/0rDhit8EV3U/s640/Screenshot-Options.png"/>

= Checking Out the Source Code =

Netbeans makes it very easy to check out the source code from our Google Code Repository.

 # The first step is to go to the Checkout menu at *Team -> Subversion -> Checkout...* <img src="https://lh5.googleusercontent.com/_OYJ8fj3PJrU/TVMSVfS0hbI/AAAAAAAAACQ/GYwM87hEzbY/s640/Screenshot-NetBeans%20IDE%206.9.png"/>
 # Type https://ieee-lsu-robotics.googlecode.com/svn/trunk into the URL box, then type your email address and personal Google Code password. Note that the password is not your Google Account password used for logging into the site, but rather a special password generated by Google Code. To find your password go to this [wiki page]. <img src="https://lh6.googleusercontent.com/_OYJ8fj3PJrU/TVMSIIPmHHI/AAAAAAAAAB4/MHEJ3YFo_fY/s640/Screenshot-Checkout.png"/>
 # On this page you can specify exactly which folders to check out from the repository. For now, just leave it set to _trunk_. You can also specify where you want to store the downloaded project on your computer. Something like _/home/username/NetBeansProjects/ieee-lsu-robotics_ should be fine. Make sure the _Scan for Netbeans Projects after Checkout_ option is checked, then click *Finish*. <img src="https://lh6.googleusercontent.com/_OYJ8fj3PJrU/TVMSIWgFX9I/AAAAAAAAAB8/fvQpXlf8tTU/s640/Screenshot-Checkout-1.png"/>
 # Netbeans should now check out the project and display a window asking if you want to open the project. Click *Open Project*. <img src="https://lh3.googleusercontent.com/_OYJ8fj3PJrU/TVMSIbb-3aI/AAAAAAAAACA/nBqxZrlkRJo/s800/Screenshot-Checkout%20Completed.png"/>
 # Congratulations! You should now have the *Robotics* project displayed on the left in the projects explorer. Try building and running the project to make sure it works. <img src="https://lh6.googleusercontent.com/_OYJ8fj3PJrU/TVMShD-ecOI/AAAAAAAAACg/CitpcBvN50I/s640/Screenshot-Robotics%20-%20NetBeans%20IDE%206.9.png"/>


= Adding OpenCV Header and Library Files to your Project =

The OpenCV header and library files should already be added to your project, but in case they are not (or if you want to add other header and library files to your project) follow these directions.

For those who are new to big C++ projects, header files contain class, function, and variable declarations which are needed for checking parameter and variable types when compiling. They usually contain comments explaining how to use the included classes and functions, and can be thought of as an interface.

Library files on the other hand actually contain the detailed definitions of functions described by the header file. What distinguishes a library from a regular C++ source file is that it has already been compiled. There are two types of libraries: static and dynamic. Static libraries are actually copied into your executable when you compile your project, so if you have two copies of the executable, both will include the code of the static library. 

However, for libraries that will be used by many different programs or by multiple simultaneous copies of the same program, it would make sense for them to somehow share the library code instead of containing a copy. Dynamic libraries do just that. Instead of being included in the executable, they are linked in during runtime.

In Linux, static libraries are referred to as _archive files_ and distinguished by a *.a* extension, while dynamic libraries are referred to as _shared objects_ and distinguished by a *.so* extension. The corresponding Windows term for static library is simply _library_ and distinguished by a *.lib* extension, while dynamic libraries are referred to as _dynamic link libraries_ and distinguished by a *.dll* extension.

For our project we will probably use the OpenCV dynamic libaries (libhighgui.so, etc.) located in the _/usr/lib_ folder.

 # Go to the properties menu by right clicking the project name in the left window and selecting *Properties*. <img src="https://lh3.googleusercontent.com/_OYJ8fj3PJrU/TVMShTjyAXI/AAAAAAAAACo/qDgmjAcpbWg/s640/Screenshot-Robotics%20-%20NetBeans%20IDE%206.9-1.png"/>
 # Go to the _C++ Compiler_ menu under the _Build_ category. Add the folder for OpenCV header files to the include path by typing */usr/include/opencv* in the _Include Directories_ box. <img src="https://lh3.googleusercontent.com/_OYJ8fj3PJrU/TVMSWDiXo4I/AAAAAAAAACY/jfRT8plhgF8/s640/Screenshot-Project%20Properties%20-%20Robotics.png"/>
 # Go to the _Linker_ menu under the _Build_ category. Add */usr/bin* to the _Additional Library Directories_ box. <img src="https://lh6.googleusercontent.com/_OYJ8fj3PJrU/TVMSg3SX4FI/AAAAAAAAACc/1dmXJvwVuNE/s640/Screenshot-Project%20Properties%20-%20Robotics-1.png"/>
 # Click on the _Libraries_ box. A window should pop up for adding additional libraries to your project. <img src="https://lh3.googleusercontent.com/_OYJ8fj3PJrU/TVMSVVyi8MI/AAAAAAAAACM/ApecuAOpCLE/s640/Screenshot-Debug%20-%20Libraries-1.png"/> 
 # Click the *Add Library* button to bring up another window for selecting library files. Navigate to *libhighgui.so* in the _/usr/lib_ folder and click *OK*. I had trouble getting the .a files to work, so make sure _Files of Type_ on the bottom is set to dynamic library (.so) or else you might not see the .so files.<img src="https://lh6.googleusercontent.com/_OYJ8fj3PJrU/TVMSiMKC_pI/AAAAAAAAACw/3K8eftRJdVg/s400/Screenshot-Select%20Library.png"/>
 # You can additional libraries by clicking the *Add Library* button again. I believe that *highgui* is the only library we need to include for our project, but you can try adding others (such as cv, cvaux, and cxcore) just to be sure it works. <img src="https://lh6.googleusercontent.com/_OYJ8fj3PJrU/TVMSVGKKPFI/AAAAAAAAACI/tJr3JQBbOJI/s640/Screenshot-Debug%20-%20Libraries.png"/>